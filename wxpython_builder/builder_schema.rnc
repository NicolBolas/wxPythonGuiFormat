
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

#App and main windows.
div
{
    start = bld.root.model
    
    bld.root.model =
        bld.app.elem
    
    bld.app.elem =
        element app { bld.app.contents }

    bld.app.contents =
        bld.app.attlist,
        bld.module.elem*,
        bld.main-wnds.model+

    bld.app.attlist = empty
    
    bld.module.elem =
        ##All children of the parent of this element will
        ##have this module made available to any Python scripts.
        element module { bld.module.contents }
    
    bld.module.contents =
        bld.module.attlist
    
    bld.module.attlist =
        bld.module.name.attrib,
        bld.module.as.attrib?
    
    bld.main-wnds.model =
        bld.frame.elem


    bld.frame.elem =
        ##Main frame window.
        element frame { bld.frame.contents }

    bld.frame.contents =
        bld.frame.attlist,
        bld.frame.containers.model+

    bld.frame.attlist =
        bld.id.attrib,
        bld.frame.size.attlist,
        bld.title.attrib

    bld.frame.size.attlist =
        ##Requires width and height.
        bld.width.attrib,
        bld.height.attrib

    bld.frame.containers.model =
        bld.panel.elem |
        bld.toolbar.elem
}

##Frame containers
div
{
    bld.panel.elem =
        ##One of the child elements of a frame, storing arbitrary content.
        element panel { bld.panel.contents }
    
    bld.panel.contents =
        bld.panel.attlist,
        bld.windows.model*

    bld.panel.attlist =
        bld.std.window.attlist,
        bld.panel.aui.attlist,
        bld.sizer.attlist

    bld.panel.aui.attlist =
        bld.panel.aui.dock.attrib,
        bld.aui.caption.attrib?,
        bld.aui.common.attlist,
        bld.aui.buttons.attrib?,
        bld.aui.floatable.attrib?

    bld.aui.common.attlist =
        bld.aui.name.attrib?,
        bld.aui.row.attrib?,
        bld.aui.layer.attrib?,
        bld.aui.resizeable.attrib?,
        bld.aui.gripper.attrib?

    bld.toolbar.elem =
        ##A toolbar in a frame window, storing arbitrary content.
        element toolbar { bld.toolbar.contents }
    
    bld.toolbar.contents =
        bld.toolbar.attlist,
        bld.windows.model*

    bld.toolbar.attlist =
        bld.std.window.attlist,
        bld.toolbar.aui.attlist,
        bld.sizer.attlist
    
    bld.toolbar.aui.attlist =
        bld.aui.dock.attrib,
        bld.aui.common.attlist
    
    bld.windows.model =
        bld.containers.model | bld.controls.model
}

##Container windows.
div
{
    bld.containers.model =
        bld.cont.sizer.elem
    
    bld.cont.sizer.elem =
        ##A non-window sizer, which can contain other windows.
        element sizer { bld.cont.sizer.contents }
    
    bld.cont.sizer.contents =
        bld.cont.sizer.attlist,
        bld.windows.model*
    
    bld.cont.sizer.attlist =
        bld.size.opt.attlist,
        bld.window.position.attlist,
        bld.sizer.attlist
}

##Control windows
div
{
    bld.controls.model =
        bld.ctrl.static-text.elem |
        bld.ctrl.button.elem |
        bld.ctrl.spacer.elem

    bld.ctrl.static-text.elem =
        ##A wxStaticText control
        element static-text { bld.ctrl.static-text.contents }

    bld.ctrl.static-text.contents =
        bld.ctrl.static-text.attlist

    bld.ctrl.static-text.attlist =
        bld.std.window.attlist,
        bld.std.control.attlist,
        bld.window.position.attlist,
        bld.static-text.label.model
    
    bld.static-text.label.model =
        bld.std.label.attrib,
        bld.std.label-align.attrib?

    ##May add default enable/disable attribute to controls or similar things.
    bld.std.control.attlist =
        empty

    bld.ctrl.button.elem =
        ##A wxButton or wxBitmapButton
        element button { bld.ctrl.button.contents }
        
    bld.ctrl.button.contents =
        bld.ctrl.button.attlist
    
    bld.ctrl.button.attlist =
        bld.std.window.attlist,
        bld.std.control.attlist,
        bld.window.position.attlist,
        bld.button.label.model,
        bld.button.py.action.attrib?

    bld.button.label.model =
        ##Should also include a way to get a bitmap.
        bld.std.label.attrib,
        bld.std.full.label-align.attrib?
    
    bld.ctrl.spacer.elem =
        ##Inserts space into the parent sizer.
        element spacer { bld.ctrl.spacer.contents }

    bld.ctrl.spacer.contents =
        bld.ctrl.spacer.attlist

    bld.ctrl.spacer.attlist =
        bld.spacer.size.attrib?,
        bld.position.proportion.attrib?
}

##Common attlists
div
{
    bld.std.window.attlist =
        bld.tooltip.attrib?,
        bld.id.attrib?,
        bld.size.opt.attlist

    bld.size.opt.attlist =
        bld.width.attrib?,
        bld.height.attrib?
        
    bld.sizer.attlist =
        bld.box.sizer.attlist

    bld.box.sizer.attlist =
        bld.box.orient.attrib
        
    bld.window.position.attlist =
        bld.position.valign.attrib?,
        bld.position.halign.attrib?,
        bld.position.expand.attrib?,
        bld.position.proportion.attrib?,
        (bld.position.border.size.attrib, bld.position.border.dir.attrib)?
}

## All attributes.
div
{
    bld.module.name.attrib =
        ##Name of the module to import.
        attribute name { text }
        
    bld.module.as.attrib =
        ##The name to give the module. May not be dotted.
        ##If not present, then the module will be imported as specified.
        attribute as { text }

    bld.id.attrib =
        ## Identifier used to find specific windows within a context.
        attribute id { bld.id.data }
        
    bld.width.attrib =
        attribute width { xsd:positiveInteger }

    bld.height.attrib =
        attribute height { xsd:positiveInteger }
        
    bld.title.attrib =
        ##The textual title of a window.
        attribute title { text }
        
    bld.tooltip.attrib =
        ##Tooltip for this window.
        attribute tooltip { text }

    ##AUI attributes.
    div 
    {
        bld.aui.name.attrib =
            ##Specifies the name of the toolbar/panel's aui pane.
            ##Having a fixed name is important for being able to save the configuration and reloading it.
            ##If this is not present, the pane uses the `id`, and if that's not present, it generates a
            ##name based on the number of unnamed panes before it in the frame.
            attribute aui.name { text }
            
        bld.aui.caption.attrib =
            ##The visible caption for an AUI panel.
            attribute aui.caption { text }
    
        bld.panel.aui.dock.attrib =
            ##Specifies the direction the panel is docked to.
            attribute aui.dock {"right" | "left" | "top" | "bottom" | "center" }
    
        bld.aui.dock.attrib =
            ##Specifies the direction the panel is docked to. Cannot dock to center.
            attribute aui.dock {"right" | "left" | "top" | "bottom" }
    
        bld.aui.buttons.attrib =
            ##A `|` separated list of buttons that should be visible on the pane.
            ##Valid button names are "close", "pin", "minimize", and "maximize"
            attribute aui.buttons { text }
    
        bld.aui.floatable.attrib =
            ##True if the panel/toolbar can be made floating.
            [ a:defaultValue = "true" ]
            attribute aui.floatable { bld.boolean.data }
    
        bld.aui.row.attrib =
            ## Specifies the order for panes attached to the same layer.
            attribute aui.row { xsd:nonNegativeInteger }
    
        bld.aui.layer.attrib =
            ## Determines how close the attached pane is to the center.
            attribute aui.layer { xsd:nonNegativeInteger }
    
        bld.aui.resizeable.attrib =
            ##If true, then the panel or toolbar can be resized. If false, it cannot be resized.
            ##For panels, this is true by default. For toolbars, it is false by default.
            attribute aui.resizeable { bld.boolean.data }
    
        bld.aui.gripper.attrib =
            ##If true, then the pane will have a region that the user can use to reposition it.
            [ a:defaultValue = "true"]
            attribute aui.gripper { bld.boolean.data }
    }
    
    ##Sizer attributes
    div
    {
        bld.box.orient.attrib =
            ##Stacking direction for the box.
            attribute box.orient { "horizontal" | "vertical" }
    }
    
    ##Positioning attributes
    div
    {
        bld.position.valign.attrib =
            ##Defines the vertical alignment of the item in its sizer area.
            [ a:defaultValue = "top"]
            attribute valign { "top" | "bottom" | "center" }

        bld.position.halign.attrib =
            ##Defines the horizontal alignment of the item in its sizer area.
            [a:defaultValue = "left"]
            attribute halign { bld.horiz.align.data }
            
        bld.position.expand.attrib =
            ##Specifies whether the size of the control expands to fill the give sizer area.
            [a:defaultValue = "false"]
            attribute expand { bld.boolean.data }

        bld.position.proportion.attrib =
            ##Defines the proportion space ratio for the control.
            [a:defaultValue = "0"]
            attribute proportion { xsd:nonNegativeInteger }
            
        bld.position.border.size.attrib =
            attribute border.size { xsd:nonNegativeInteger }
        
        bld.position.border.dir.attrib =
            ##A `|` separated list of directions to which the border size will apply. May include:
            ##"left", "right", "top", "bottom", or "all"
            attribute border.dir { text }
            
            
    }
    
    ##Control-specific attributes
    div
    {
        bld.std.label.attrib =
            ##Text to be displayed in the attribute.
            attribute label { text }
            
        bld.std.label-align.attrib =
            ##Alignment of the label within the control.
            [a:defaultValue = "left"]
            attribute label-align { bld.horiz.align.data }
            
        bld.std.full.label-align.attrib =
            ##Alignment of label in all four directions.
            [a:defaultValue = "center"]
            attribute label-align { bld.align.all.data }
        
        bld.button.py.action.attrib =
            ##A Python expression to be invoked when this button is clicked.
            attribute py.action { text }
        
        bld.spacer.size.attrib =
            ##The size for the spacer.
            attribute size { xsd:nonNegativeInteger }
    }
}

## Data types 
div
{
    bld.id.data = text
    
    bld.horiz.align.data = "left" | "right" | "center"
    
    bld.align.all.data = "left" | "right" | "top" | "bottom" | "center"
    
    ## XSD's boolean type includes things other than "true" and "false",
    ## so we do it manually.
    bld.boolean.data = "true" | "false"
}
